C51 COMPILER V9.60.7.0   PASSWORD_INPUT                                                    07/24/2025 17:43:21 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE PASSWORD_INPUT
OBJECT MODULE PLACED IN .\Objects\password_input.obj
COMPILER INVOKED BY: C:\keil_C51\C51\BIN\C51.EXE password_input.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\password_input.lst) TABS(2) OBJECT(.\Objects\password_input.obj)

line level    source

   1          #include "password_input.h"
   2          #include "delay.h"
   3          #include "LCD1602.h"
   4          #include "MatrixKey.h"
   5          
   6          // 内部全局变量（仅模块内可见）
   7          static unsigned char KeyNum = 0;                  // 按键值
   8          static unsigned char InputPassword[PWD_LENGTH + 1] = {0};  // 输入密码数组
   9          static unsigned char InputCount = 0;              // 输入长度计数
  10          static unsigned char code DefaultCorrectPwd[PWD_LENGTH + 1] = "12345678";  // 默认正确密码
  11          static unsigned char *CorrectPwd = DefaultCorrectPwd;  // 当前正确密码
  12          
  13          // 内部函数声明（仅模块内使用）
  14          static void UpdatePasswordDisplay(void);  // 更新显示
  15          static bit CheckPassword(void);           // 验证密码
  16          static void ClearInput(void);             // 清空输入
  17          
  18          /**
  19           * 初始化密码输入模块
  20           */
  21          void PasswordInput_Init(void) {
  22   1          LCD_Init();  // 初始化LCD
  23   1          LCD_ShowString(1, 1, "Password:");    // 显示提示
  24   1          LCD_ShowString(2, 1, "                ");  // 清空第二行
  25   1      }
  26          
  27          /**
  28           * 更新密码显示（内部函数）
  29           */
  30          static void UpdatePasswordDisplay(void) {
  31   1          unsigned char i;
  32   1          // 清空第二行显示区域
  33   1          LCD_ShowString(2, 1, "                ");
  34   1          // 显示已输入的密码字符
  35   1          for (i = 0; i < InputCount; i++) {
  36   2              LCD_ShowChar(2, i + 1, InputPassword[i]);
  37   2          }
  38   1      }
  39          
  40          /**
  41           * 验证密码（内部函数）
  42           * @return 1-正确，0-错误
  43           */
  44          static bit CheckPassword(void) {
  45   1          unsigned char i;
  46   1          for (i = 0; i < PWD_LENGTH; i++) {
  47   2              if (InputPassword[i] != CorrectPwd[i]) {
  48   3                  return 0;  // 有一位不同则错误
  49   3              }
  50   2          }
  51   1          return 1;  // 全部相同则正确
  52   1      }
  53          
  54          /**
C51 COMPILER V9.60.7.0   PASSWORD_INPUT                                                    07/24/2025 17:43:21 PAGE 2   

  55           * 清空输入（内部函数）
  56           */
  57          static void ClearInput(void) {
  58   1          unsigned char i;
  59   1          for (i = 0; i < PWD_LENGTH; i++) {
  60   2              InputPassword[i] = 0;
  61   2          }
  62   1          InputCount = 0;
  63   1          UpdatePasswordDisplay();
  64   1      }
  65          
  66          /**
  67           * 密码输入主循环
  68           * @return 1-验证成功，0-验证失败，2-未完成验证
  69           */
  70          unsigned char PasswordInput_Loop(void) {
  71   1          KeyNum = MatrixKey();  // 读取按键
  72   1      
  73   1          if (KeyNum != 0) {  // 有按键按下
  74   2              // 处理数字键1-3（S1-S3）
  75   2              if (KeyNum >= KEY_1 && KeyNum <= KEY_3) {
  76   3                  if (InputCount < PWD_LENGTH) {
  77   4                      InputPassword[InputCount] = '0' + KeyNum;  // 转换为'1'-'3'
  78   4                      InputCount++;
  79   4                      UpdatePasswordDisplay();
  80   4                  }
  81   3              }
  82   2              // 处理数字键4-6（S5-S7）
  83   2              else if (KeyNum >= KEY_4 && KeyNum <= KEY_6) {
  84   3                  if (InputCount < PWD_LENGTH) {
  85   4                      InputPassword[InputCount] = '0' + (KeyNum - 1);  // 转换为'4'-'6'
  86   4                      InputCount++;
  87   4                      UpdatePasswordDisplay();
  88   4                  }
  89   3              }
  90   2              // 处理数字键7-9（S9-S11）
  91   2              else if (KeyNum >= KEY_7 && KeyNum <= KEY_9) {
  92   3                  if (InputCount < PWD_LENGTH) {
  93   4                      InputPassword[InputCount] = '0' + (KeyNum - 2);  // 转换为'7'-'9'
  94   4                      InputCount++;
  95   4                      UpdatePasswordDisplay();
  96   4                  }
  97   3              }
  98   2              // 处理0键（S14）
  99   2              else if (KeyNum == KEY_0) {
 100   3                  if (InputCount < PWD_LENGTH) {
 101   4                      InputPassword[InputCount] = '0';
 102   4                      InputCount++;
 103   4                      UpdatePasswordDisplay();
 104   4                  }
 105   3              }
 106   2              // 处理*键（S13）
 107   2              else if (KeyNum == KEY_STAR) {
 108   3                  if (InputCount < PWD_LENGTH) {
 109   4                      InputPassword[InputCount] = '*';
 110   4                      InputCount++;
 111   4                      UpdatePasswordDisplay();
 112   4                  }
 113   3              }
 114   2              // 处理#键（S15）
 115   2              else if (KeyNum == KEY_HASH) {
 116   3                  if (InputCount < PWD_LENGTH) {
C51 COMPILER V9.60.7.0   PASSWORD_INPUT                                                    07/24/2025 17:43:21 PAGE 3   

 117   4                      InputPassword[InputCount] = '#';
 118   4                      InputCount++;
 119   4                      UpdatePasswordDisplay();
 120   4                  }
 121   3              }
 122   2              // 处理退格键（S4）
 123   2              else if (KeyNum == KEY_BACKSPACE) {
 124   3                  if (InputCount > 0) {
 125   4                      InputCount--;
 126   4                      InputPassword[InputCount] = 0;  // 清除最后一位
 127   4                      UpdatePasswordDisplay();
 128   4                  }
 129   3              }
 130   2              // 处理清除键（S8）
 131   2              else if (KeyNum == KEY_CLEAR) {
 132   3                  ClearInput();  // 清空输入
 133   3              }
 134   2              // 处理确认键（S12）
 135   2              else if (KeyNum == KEY_CONFIRM) {
 136   3                  if (InputCount == PWD_LENGTH) {  // 输入满8位才验证
 137   4                      if (CheckPassword()) {
 138   5                          LCD_ShowString(2, 1, "Correct!      ");
 139   5                          Delay1ms(1500);  // 显示结果
 140   5                          ClearInput();    // 重置输入
 141   5                          return 1;  // 返回验证成功
 142   5                      } else {
 143   5                          LCD_ShowString(2, 1, "Wrong!        ");
 144   5                          Delay1ms(1500);
 145   5                          ClearInput();
 146   5                          return 0;  // 返回验证失败
 147   5                      }
 148   4                  } else {
 149   4                      LCD_ShowString(2, 1, "Need 8 chars! ");  // 提示输入不足
 150   4                      Delay1ms(1000);
 151   4                      UpdatePasswordDisplay();  // 恢复显示输入内容
 152   4                  }
 153   3              }
 154   2          }
 155   1          return 2;  // 未完成验证
 156   1      }
 157          
 158          /**
 159           * 设置自定义正确密码
 160           * @param correctPwd 指向8位密码的指针
 161           */
 162          void PasswordInput_SetCorrectPwd(unsigned char *correctPwd) {
 163   1          if (correctPwd != 0) {  // 指针非空才设置
 164   2              CorrectPwd = correctPwd;
 165   2          }
 166   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    440    ----
   CONSTANT SIZE    =     81    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
